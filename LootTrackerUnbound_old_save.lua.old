---
--- Generated by Luanalysis
--- Created by chass.
--- DateTime: 17/12/2022 17:19
---
SLASH_LootManager1 = "/ltu"
local TOCNAME, LTU = ...
local L = setmetatable({}, {__index = function(_, k) return LTU.L[k] end})

RollTrackerClassic_Addon = LTU
-- Fonction pour envoyer un message dans la fenêtre de discussion
local function sendMessageInRaid(text)
    SendChatMessage(text, "RAID")
end
local function sendMessageInGroup(text)
    SendChatMessage(text, "PARTY")
end
local function sendMessageInRaidWarning(text)
    SendChatMessage(text, "RAID_WARNING")
end
local function sendMessageInSay(text)
    SendChatMessage(text, "SAY")
end
local function_chat = null
local f = CreateFrame("FRAME")
local loots = {}

local function sendMessageInChat(text)
        if IsInRaid() then
            if UnitIsRaidOfficer("player") or UnitIsGroupLeader("player") then
                function_chat = sendMessageInRaidWarning
            else
                function_chat = sendMessageInRaid
            end
        elseif IsInGroup() then
            function_chat = sendMessageInGroup
        else
            function_chat = sendMessageInSay
        end
    function_chat(text)
end

-- Fonction pour annoncer les butins disponibles
local function announceLoot()
    -- On reset la liste des loots
    local num_items = GetNumLootItems()
    if num_items == 0 then
        -- Aucun butin disponible
        return
    end
    local iterator = 1

    for i = 1, num_items do

        local lootIcon, lootName, lootQuantity, currencyID, lootQuality, locked, isQuestItem, questID, isActive= GetLootSlotInfo(i)
        local  itemLink = GetLootSlotLink(i)
        loots[iterator] = itemLink
        if itemLink ~= nil then
            -- On vérifie que l'item n'est pas déjà dans la liste
            if next(loots) ~= nil then
               print(loots)
            end

        end

    end
    -- Annonce des butins disponibles
    sendMessageInChat("Butins disponibles :")
    for i = 1, #loots do
        sendMessageInChat("["..iterator.."] -> "..loots[i])
    end
end

-- Tableau pour stocker les joueurs qui ont jeté les dés et leurs résultats
local rolls = {}

-- Fonction pour réinitialiser les lancés de dés
-- Réinitialisation de la table des lancés de dés
local function resetRolls()
    -- Vérification qu'il y a au moins un élément dans la table des lancés de dés
    -- Vérification que la variable rolls est une table de paires clé/valeur
    for index,valeur in pairs(rolls) do
        print(valeur)
    end
   if type(rolls) ~= "table" then
        sendMessageInChat("La variable rolls n'est pas une table de paires clé/valeur")
    end

    rolls = {}
        sendMessageInChat("Tous les rolls ont été réinitialisé.")
end



function LTU.HideWindow()
    LootWindow:Hide()
end

function LTU.ShowWindow(id)
    -- workaround for a strange bug
    if LootWindow.Tabs then
        for i = 1, LootWindow.numTabs do
            local child = LootWindow.Tabs[i].content
            child:SetParent(LootWindow)
            child:ClearAllPoints()
            child:SetPoint("TOPLEFT", 8, -30)
            child:SetPoint("BOTTOMRIGHT", -8, 8)
        end
    end

    LootWindow:Show()
    LTU.UpdateRollList()
    LTU.UpdateLootList()
    LTU.Tool.SelectTab(RollTrackerClassicMainWindow, id)
end
-- Fonction d'affichage de la liste des lancés de dés
 function LTU.ToggleWindow(id)
     if LootWindow:IsVisible() then
         LTU.HideWindow()
     else
         LTU.ShowWindow(id)
     end
 end

local function countDown()

end

-- Fonction pour afficher la liste des lancés de dés
local function displayRollList()
        -- Réinitialisation de la liste
        for i = 1, container:GetNumChildren() do
            container:GetChildren()[i]:Hide()
        end

        -- Ajout des lancés de dés à la liste
        for name, roll in pairs(rolls) do
            addRoll(name, roll)
        end
    end
    -- Bouton pour mettre fin aux lancés de dés et annoncer le vainqueur
    local end_button = CreateFrame("Button", nil, rolls_frame, "GameMenuButtonTemplate")
    end_button:SetPoint("BOTTOM", rolls_frame, "BOTTOM", 0, 10)
    end_button:SetSize(150, 30)
    end_button:SetText("Mettre fin aux lancés de dés")
    end_button:SetScript("OnClick", function()
        -- Trouver le vainqueur
        local winner, winning_roll = nil, 0
        for name, roll in pairs(rolls) do
            if roll > winning_roll then
                winner = name
                winning_roll = roll
            end
        end

        -- Annonce du vainqueur
        sendMessageInChat(winner .. " remporte le butin avec un lancé de " .. winning_roll .. " !")

        -- Réinitialisation des lancés de dés
        resetRolls()
        displayRollList()
    end)

    -- Bouton pour effacer les lancés de dés et passer à l'objet suivant
    local next_button = CreateFrame("Button", nil, rolls_frame, "GameMenuButtonTemplate")
    next_button:SetPoint("BOTTOM", end_button, "TOP", 0, 10)
    next_button:SetSize(150, 30)
    next_button:SetText("Passer à l'objet suivant")
    next_button:SetScript("OnClick", function()
        -- Réinitialisation des lancés de dés
        resetRolls()
        displayRollList()

    end)

-- Fonction de réception des lancés de dés
local function onRoll(roll_id, roll_time, roll_player, roll_item, roll_response, roll_total)
    -- Conversion de roll_response en nombre
    local roll_number = tonumber(roll_response)
    -- Vérification de la valeur de roll_number
    if roll_number then
        -- Ajout du lancé de dé à la liste si roll_number est un nombre
        rolls[roll_player] = roll_number
    end

    -- Mise à jour de la liste des lancés de dés
    displayRollList()
end

-- L'addon n'est pas encore chargé, on attend l'événement ADDON_LOADED
local function onAddonLoaded(event, addonName)
    sendMessageInSay("ICI "..addonName)

    if addonName == "LootTrackerUnbound" then
        -- L'addon est chargé, on affiche la fenêtre de l'interface
       LTU.toggleWindow()
        -- On se désinscrit de l'événement ADDON_LOADED
        f:UnregisterEvent(event)
    end
end

-- Fonction de gestion de l'ouverture de butins sur les boss de raid
local function onLootOpened(event, lootGuid, lootName)
    announceLoot()
    -- Vérification que le butin provient d'un boss de raid
    if IsInInstance() then
        -- Vérification de l'état de chargement de l'addon
        if not RollsFrame then
            f:RegisterEvent("ADDON_LOADED", "LootTrackerUnbound")
            f:SetScript("OnEvent", onAddonLoaded("ADDON_LOADED", "LootTrackerUnbound"))
        else
            -- L'addon est déjà chargé, on affiche la fenêtre de l'interface
            LTU.ToggleWindow()
        end
    end
end
    -- Enregistrement de la fonction de réception des lancés de dés
    local events = CreateFrame("Frame")
    events:RegisterEvent("CHAT_MSG_SYSTEM")
    events:SetScript("OnEvent", function(self, event, ...)
        if event == "CHAT_MSG_SYSTEM" then
            local message = ...
            local roll_pattern = "^(.+) a effectué un lancé de (.+) %((%d+)%-(%d+)%) pour: (.+)$"
            local roll_player, roll_roll, roll_min, roll_max, roll_item = string.match(message, roll_pattern)
            if roll_player then
                -- Ajout du lancé de dé à la liste
              --  rolls[roll_player] = tonumber(roll_roll)

                -- Mise à jour de la liste des lancés de dés
                displayRollList()
            end
        end
    end)
    function SlashCmdList.LootManager(msg, editbox)
        -- Vérification de l'état de chargement de l'addon
        if not rollsFrame then
            -- L'addon n'est pas encore chargé, on attend l'événement ADDON_LOADED
            f:RegisterEvent("ADDON_LOADED", "LootTrackerUnbound")
            f:SetScript("OnEvent", onAddonLoaded)
        else
            -- L'addon est déjà chargé, on affiche la fenêtre de l'interface
            rollsFrame:Show()
        end
end


-- Enregistrement de la fonction comme écouteur de l'événement LOOT_OPENED
f:RegisterEvent("LOOT_OPENED")
f:SetScript("OnEvent", onLootOpened)
